{"version":3,"sources":["shared.js","App.js","index.js"],"names":["BLOCK_SIZES","title","text","className","App","useState","documentLayout","setDocumentLayout","rollbackData","setRollbackData","editMode","setEditMode","useEffect","fetchDocument","data","toggleColapseble","e","updated","Object","assign","target","id","isOpen","handleUpdateTitle","key","value","fetch","headers","Accept","then","r","json","res","orderedBlocks","keys","sort","a","b","order","reduce","obj","val","blockType","console","log","loadDocument","catch","err","onClick","values","map","item","block","updateTitle","style","width","size","onChange","defaultValue","content","SimpleTextBlock","srcSet","url","alt","altText","caption","fontWeight","QuoteBlock","tableRows","index","undefined","row","col1","col2","col3","renderTableRows","TableBlock","dangerouslySetInnerHTML","__html","HTMLBlock","toggleAction","CollapsabaleBlock","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1fb41ce3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst BLOCK_SIZES = [\"100%\", \"66%\", \"50%\", \"33%\"]; // block size array for documnt layout\r\n\r\nconst title = (text) => <div className=\"title\">{text}</div>;\r\n\r\n/** All types of block that document can have as shared resources */\r\n\r\n// Simple text block\r\nexport function SimpleTextBlock(block, editMode, updateTitle) {\r\n  return (\r\n    <div\r\n      className=\"block-wrapper\"\r\n      style={{ width: BLOCK_SIZES[block.size - 1] }}\r\n    >\r\n      <div\r\n        id={block.data.id}\r\n        key={block.data.id}\r\n        className=\"block columns container margin\"\r\n      >\r\n        <div className=\"block-type\">{block.blockType}</div>\r\n        {!editMode && title(block.data.title)}\r\n        {editMode && (\r\n          <input\r\n            onChange={(e) => updateTitle(e, block.id)}\r\n            defaultValue={block.data.title}\r\n          />\r\n        )}\r\n        <div className=\"content\">{block.data.content}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Image block\r\nexport function ImageBlock(block) {\r\n  return (\r\n    <div\r\n      className=\"block-wrapper\"\r\n      style={{ width: BLOCK_SIZES[block.size - 1] }}\r\n    >\r\n      <div id={block.id} key={block.id} className=\"block rows container margin\">\r\n        <div className=\"columns\">\r\n          <div className=\"block-type\">{block.blockType}</div>\r\n          <img srcSet={`${block.data.url} 0.5x`} alt={block.data.altText} />\r\n          <div>{block.data.caption}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Quote block\r\nexport function QuoteBlock(block) {\r\n  return (\r\n    <div\r\n      className=\"block-wrapper\"\r\n      style={{ width: BLOCK_SIZES[block.size - 1] }}\r\n    >\r\n      <div id={block.id} key={block.id} className=\"block margin columns\">\r\n        <div className=\"block-type\">{block.blockType}</div>\r\n        <span style={{ fontWeight: \"bold\" }}>{block.data}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Table block\r\nexport function TableBlock(block) {\r\n  // Table rows render\r\n  const renderTableRows = (tableRows) => {\r\n    let index = 1;\r\n    if (tableRows !== undefined) {\r\n      return tableRows.map((row) => {\r\n        index = index + 0.1;\r\n\r\n        return (\r\n          <tr key={`row=${index}`}>\r\n            <td>{row.col1}</td>\r\n            <td>{row.col2}</td>\r\n            <td>{row.col3}</td>\r\n          </tr>\r\n        );\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Table header render\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <tr>\r\n        <th>{`col1`}</th>\r\n        <th>{`col2`}</th>\r\n        <th>{`col3`}</th>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"block-wrapper\"\r\n      style={{ width: BLOCK_SIZES[block.size - 1] }}\r\n    >\r\n      <div className=\"block margin\" id={block.id} key={block.id}>\r\n        <span className=\"block-type\">{block.blockType}</span>\r\n        <table className=\"table\">\r\n          <thead>{renderTableHeader()}</thead>\r\n          <tbody>{renderTableRows(block.data)}</tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Html block\r\nexport function HTMLBlock(block) {\r\n  // console.log(\"HTMLBlock\");\r\n  return (\r\n    <div\r\n      className=\"block-wrapper\"\r\n      style={{ width: BLOCK_SIZES[block.size - 1] }}\r\n    >\r\n      <div id={block.id} key={block.id} className=\"block columns margin \">\r\n        <div className=\"block-type\">{block.blockType}</div>\r\n        <div dangerouslySetInnerHTML={{ __html: block.data }} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Collapsabale text block\r\nexport function CollapsabaleBlock(block, editMode, toggleAction, updateTitle) {\r\n  return (\r\n    <div\r\n      className=\"block-wrapper\"\r\n      style={{ width: BLOCK_SIZES[block.size - 1] }}\r\n    >\r\n      <div\r\n        key={`${block.id}`}\r\n        id={block.id}\r\n        className=\"block columns container margin\"\r\n      >\r\n        <div className=\"block-type\">{block.blockType}</div>\r\n        <button id={block.id} className=\"add-btn\" onClick={toggleAction}>\r\n          {block.isOpen ? \"- hide\" : \"+ show\"}\r\n        </button>\r\n        <div className={`collapse-content ${block.isOpen ? \"show\" : \"hide\"}`}>\r\n          {!editMode && title(block.data.title)}\r\n          {editMode && (\r\n            <input onChange={updateTitle} defaultValue={block.data.title} />\r\n          )}\r\n          <div className=\"content\">{block.data.content}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\n\nimport { useEffect, useState } from \"react\";\nimport {\n  SimpleTextBlock,\n  ImageBlock,\n  CollapsabaleBlock,\n  HTMLBlock,\n  QuoteBlock,\n  TableBlock\n} from \"./shared.js\";\n\nexport default function App() {\n  const [documentLayout, setDocumentLayout] = useState(null);\n  const [rollbackData, setRollbackData] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n\n  useEffect(() => {\n    fetchDocument(); // loading document's data on component first mount\n  }, []);\n\n  // function for handle collapsable blocks change of collapse state\n  const toggleColapseble = (e) => {\n    const updated = Object.assign({}, documentLayout);\n    updated[e.target.id].isOpen = !documentLayout[e.target.id].isOpen;\n    setDocumentLayout(updated);\n  };\n\n  // function for handle update text/collapsable block's title\n  const handleUpdateTitle = (e, key) => {\n    const updated = Object.assign({}, documentLayout);\n    updated[key].data.title = e.target.value;\n    setDocumentLayout(updated);\n  };\n\n  // adjust json of loaded document for parsing purposes by the app\n  const loadDocument = (data) => {\n    const orderedBlocks = Object.keys(data.documentLayout)\n      .sort((a, b) =>\n        // sorting blocks key by block's sort parameters, to have block displayed by their order\n        // sorting document hash map by re-ordering map keys\n        data.documentLayout[a].order > data.documentLayout[b].order ? 1 : -1\n      )\n      .reduce((obj, key) => {\n        let val = data.documentLayout[key];\n\n        if (val.blockType === \"collapsabale\") {\n          // adding state param for collapsable block items\n          val = Object.assign({}, val, { isOpen: false });\n        }\n\n        // adding Id param for each  block item that represents thair key in document's map object\n        obj[key] = Object.assign({}, val, { id: key });\n        return obj;\n      }, {});\n    console.log(orderedBlocks);\n    setDocumentLayout(orderedBlocks);\n  };\n\n  // function for handle turn on of edit mode\n  const handleToggleEditMode = () => {\n    // creating initial document status before\n    // any change to have a rollback version in case of discard action /\n    setRollbackData(Object.assign({}, documentLayout));\n    setEditMode(true);\n  };\n\n  // function for handle saving the changed document\n  const handleSave = () => {\n    setEditMode(false);\n  };\n\n  // function for handle disacrd of changes\n  const handleDisacrd = () => {\n    setEditMode(false);\n    // setting document to it's pre change state\n    setDocumentLayout(rollbackData);\n    setRollbackData(null);\n  };\n\n  // function for loading the document from public folder to mimic proces of\n  // loading document from server\n  const fetchDocument = () => {\n    fetch(`document.json`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n      .then((r) => r.json())\n      .then((res) => {\n        loadDocument(res);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // parsing each block by it's type for it's proper component\n  const listBlock = (data) => {\n    if (data) {\n      return Object.values(data).map((item) => {\n        switch (item.blockType) {\n          case \"simpleText\":\n            return SimpleTextBlock(item, editMode, handleUpdateTitle);\n          case \"image\":\n            return ImageBlock(item);\n          case \"quote\":\n            return QuoteBlock(item);\n          case \"table\":\n            return TableBlock(item);\n          case \"html\":\n            return HTMLBlock(item);\n          case \"collapsabale\":\n            return CollapsabaleBlock(\n              item,\n              editMode,\n              toggleColapseble,\n              handleUpdateTitle\n            );\n          default:\n            return null;\n        }\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"app-header\" className=\"page-header\">\n        <h1>Document Render</h1>\n        {!editMode && (\n          <button className=\"edit-btn\" onClick={handleToggleEditMode}>\n            edit\n          </button>\n        )}\n        {editMode && (\n          <button className=\"edit-btn\" onClick={handleSave}>\n            save\n          </button>\n        )}\n        {editMode && (\n          <button className=\"edit-btn\" onClick={handleDisacrd}>\n            discard\n          </button>\n        )}\n      </div>\n      {documentLayout && listBlock(documentLayout)}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}